# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import es_pb2 as es__pb2


class ESStub(object):
    """Interface exported by the server.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SimpleRPC = channel.unary_unary(
                '/es.ES/SimpleRPC',
                request_serializer=es__pb2.Request.SerializeToString,
                response_deserializer=es__pb2.Response.FromString,
                )
        self.SimpleSubsribe = channel.unary_stream(
                '/es.ES/SimpleSubsribe',
                request_serializer=es__pb2.Request.SerializeToString,
                response_deserializer=es__pb2.Response.FromString,
                )


class ESServicer(object):
    """Interface exported by the server.
    """

    def SimpleRPC(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SimpleSubsribe(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ESServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SimpleRPC': grpc.unary_unary_rpc_method_handler(
                    servicer.SimpleRPC,
                    request_deserializer=es__pb2.Request.FromString,
                    response_serializer=es__pb2.Response.SerializeToString,
            ),
            'SimpleSubsribe': grpc.unary_stream_rpc_method_handler(
                    servicer.SimpleSubsribe,
                    request_deserializer=es__pb2.Request.FromString,
                    response_serializer=es__pb2.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'es.ES', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ES(object):
    """Interface exported by the server.
    """

    @staticmethod
    def SimpleRPC(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/es.ES/SimpleRPC',
            es__pb2.Request.SerializeToString,
            es__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SimpleSubsribe(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/es.ES/SimpleSubsribe',
            es__pb2.Request.SerializeToString,
            es__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
